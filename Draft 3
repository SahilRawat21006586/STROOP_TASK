import pygame
import sys
import random
import time
import csv

# Initialize pygame
pygame.init()

# Set up full window mode
WIDTH, HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h
win = pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)
pygame.display.set_caption("Stroop Task")

# Define colors (Improved Yellow for Better Contrast)
COLORS = {
    "RED": (255, 0, 0),
    "GREEN": (0, 200, 0),
    "BLUE": (0, 0, 255),
    "YELLOW": (255, 244, 79)  # Lemon Yellow for bright contrast
}

# Define keys for responses
KEYS = {
    pygame.K_r: "RED",
    pygame.K_g: "GREEN",
    pygame.K_b: "BLUE",
    pygame.K_y: "YELLOW"
}

# Font setup
def get_scaled_font(size):
    return pygame.font.Font(None, size)

title_font = get_scaled_font(50)
small_font = get_scaled_font(30)

# Quit function
def quit_game():
    pygame.quit()
    sys.exit()

# Quit confirmation screen
def confirm_exit():
    win.fill((255, 255, 255))
    exit_text = title_font.render("Are you sure you want to exit?", True, (255, 0, 0))
    small_text = small_font.render("Press Y to exit, N to return.", True, (0, 0, 0))
    win.blit(exit_text, (WIDTH // 2 - exit_text.get_width() // 2, HEIGHT * 0.4))
    win.blit(small_text, (WIDTH // 2 - small_text.get_width() // 2, HEIGHT * 0.5))
    pygame.display.flip()
    
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                quit_game()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_y:
                    quit_game()
                if event.key == pygame.K_n:
                    waiting = False  # Return to task

# Instructions Screen
def show_instructions():
    win.fill((255, 255, 255))
    title = title_font.render("Welcome to the Stroop Task", True, (0, 0, 0))
    
    instructions = [
        "You will see words displayed in different colors.",
        "Your task: Press the key for the COLOR of the word, not the word itself.",
        "   - R = Red, G = Green, B = Blue, Y = Yellow.",
        "Try to respond as quickly and accurately as possible.",
        "First, you will complete 5 practice trials.",
        "   - The practice trials will give feedback (Correct/Wrong).",
        "Then, you will complete 50 real trials (no feedback).",
        "Press SPACE to start or ESC to quit."
    ]
    
    win.blit(title, (WIDTH // 2 - title.get_width() // 2, HEIGHT * 0.1))
    
    for i, line in enumerate(instructions):
        text = small_font.render(line, True, (0, 0, 0))
        win.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT * 0.25 + i * 40))
    
    pygame.display.flip()
    
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                quit_game()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    waiting = False
                if event.key == pygame.K_ESCAPE:
                    confirm_exit()

# Practice round with feedback
def practice_round():
    font = get_scaled_font(int(HEIGHT * 0.2))  # Large words
    for _ in range(5):
        word = random.choice(list(COLORS.keys()))
        color_name, color_rgb = random.choice(list(COLORS.items()))

        win.fill((255, 255, 255))
        text = font.render(word, True, color_rgb)
        win.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - text.get_height() // 2))
        pygame.display.flip()
        
        response = None
        while response is None:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    quit_game()
                if event.type == pygame.KEYDOWN:
                    if event.key in KEYS:
                        response = KEYS[event.key]
                        correct = response == color_name  # Compare response to color name
                        
                        # Show feedback
                        feedback_text = "Correct!" if correct else "Wrong!"
                        feedback_color = (0, 200, 0) if correct else (200, 0, 0)
                        feedback = small_font.render(feedback_text, True, feedback_color)
                        win.blit(feedback, (WIDTH // 2 - feedback.get_width() // 2, HEIGHT * 0.8))
                        pygame.display.flip()
                        time.sleep(1)  # Show feedback for 1 second

                        # Black screen transition after response
                        win.fill((0, 0, 0))
                        pygame.display.flip()
                        time.sleep(0.5)

                        break
                    if event.key == pygame.K_ESCAPE:
                        confirm_exit()
        pygame.time.delay(500)

    win.fill((255, 255, 255))
    transition_text = small_font.render("Practice over. The real task starts now!", True, (0, 0, 0))
    win.blit(transition_text, (WIDTH // 2 - transition_text.get_width() // 2, HEIGHT // 2))
    pygame.display.flip()
    time.sleep(2)

# Generate balanced Stroop trials
def generate_trials(num_trials=50):
    trials = []
    half_trials = num_trials // 2

    for _ in range(half_trials):
        word = random.choice(list(COLORS.keys()))
        trials.append((word, COLORS[word], word, True))  # Congruent (word = color)

    for _ in range(half_trials):
        word = random.choice(list(COLORS.keys()))
        incongruent_color = random.choice([name for name in COLORS.keys() if name != word])
        trials.append((word, COLORS[incongruent_color], incongruent_color, False))  # Incongruent

    random.shuffle(trials)
    return trials

# Store results
results = []

# Show instructions
show_instructions()

# Run practice round
practice_round()

# Start the real Stroop task
trials = generate_trials()
trial_index = 0
font = get_scaled_font(int(HEIGHT * 0.2))  # Large words

while trial_index < len(trials):
    word, color_rgb, correct_color_name, congruent = trials[trial_index]
    
    win.fill((255, 255, 255))
    text = font.render(word, True, color_rgb)
    win.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - text.get_height() // 2))
    pygame.display.flip()

    start_time = time.time()
    response = None

    while response is None:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                confirm_exit()
            if event.type == pygame.KEYDOWN:
                if event.key in KEYS:
                    response = KEYS[event.key]
                    break
                if event.key == pygame.K_ESCAPE:
                    confirm_exit()
    
    # Black screen after response
    win.fill((0, 0, 0))
    pygame.display.flip()
    time.sleep(0.5)

    pygame.time.delay(500)

# Quit pygame
quit_game()
